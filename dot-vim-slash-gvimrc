"
" vim startup
" doug murray
" 16-Jul-98
"

if exists("syntax_on")
        syntax reset
endif

set antialias
colorscheme aurora

function! ResetScreenSize()
	execute "set lines=" . g:NumLinesOnScreen
	execute "set columns=" . g:NumColumnsOnScreen
endfunction

"
" fonts to use for UNIX, Windows or Mac
"
if has("gui_gtk")
	let g:NumColumnsOnScreen=100
	let g:NumLinesOnScreen=50
	let s:FontNormal = "DejaVu Sans Mono 11"
	let s:FontSmall = "DejaVu Sans Mono 9"
	let s:FontBig = "DejaVu Sans Mono 17"
elseif has("mac")
	let g:NumColumnsOnScreen=200
	let g:NumLinesOnScreen=70
	let s:FontNormal = "Menlo:h14"
	let s:FontSmall = "Menlo:h10"
	let s:FontBig = "Menlo:h22"
elseif has("unix")
	let g:NumColumnsOnScreen=80
	let g:NumLinesOnScreen=24
	let s:FontNormal = "-*-lucidatypewriter-medium-*-*-*-12-*-*-*-*-*-*-*"
	let s:FontSmall = "-*-lucidatypewriter-medium-*-*-*-10-*-*-*-*-*-*-*"
	let s:FontBig = "-*-lucidatypewriter-medium-*-*-*-18-*-*-*-*-*-*-*"
elseif has("win32")
	let g:NumColumnsOnScreen=80
	let g:NumLinesOnScreen=24
	let s:FontNormal = "Lucida_Console:h10:b:cANSI"
	let s:FontSmall = "Lucida_Console:h7:b:cANSI"
	let s:FontBig = "Lucida_Console:h16:b:cANSI"
endif

call ResetScreenSize()

"
" Set the default font
"
let &guifont =                    s:FontNormal

"
" GUI version supports extensive menu bar and also icon-based
" toolbar.  These functions cycle through having neither, either
" one, or both; it remaps the next function in line to a specific keypress
"
function! ShowNoMenuNoToolbar()
	set guioptions-=mT
	if exists( "s:KeyMenuToolbarCycle")
		execute "map " s:KeyMenuToolbarCycle " :call ShowMenuNoToolbar()<CR>"
	endif
endfunction

function! ShowMenuNoToolbar()
	set guioptions+=m
	set guioptions-=T
	if exists( "s:KeyMenuToolbarCycle")
		execute "map " s:KeyMenuToolbarCycle " :call ShowNoMenuToolbar()<CR>"
	endif
endfunction

function! ShowNoMenuToolbar()
	set guioptions-=m
	set guioptions+=T
	if exists( "s:KeyMenuToolbarCycle")
		execute "map " s:KeyMenuToolbarCycle " :call ShowMenuToolbar()<CR>"
	endif
endfunction

function! ShowMenuToolbar()
	set guioptions+=mT
	if exists( "s:KeyMenuToolbarCycle")
		execute "map " s:KeyMenuToolbarCycle " :call ShowNoMenuNoToolbar()<CR>"
	endif
endfunction

"
" Functions to incrementally adjust windows size
"
function! ResizeWindowWide()
        if exists( "g:NumColumnsOnScreen")
                let g:NumColumnsOnScreen+=1
                call ResetScreenSize()
        endif
endfunction

function! ResizeWindowNarrow()
        if exists( "g:NumColumnsOnScreen")
                let g:NumColumnsOnScreen-=1
                call ResetScreenSize()
        endif
endfunction

function! ResizeWindowTall()
        if exists( "g:NumLinesOnScreen")
                let g:NumLinesOnScreen+=1
                call ResetScreenSize()
        endif
endfunction

function! ResizeWindowShort()
        if exists( "g:NumLinesOnScreen")
                let g:NumLinesOnScreen-=1
                call ResetScreenSize()
        endif
endfunction

"
" This function redraws the display in a smaller font, then remaps the
" keypress to a function displaying a normal sized font. That function
" in turn maps the keypress to a function displaying a large font.
"
function! UseSmallFont()
	let &guifont = s:FontSmall
	if exists( "s:KeyFontSizeChange")
		execute "map " s:KeyFontSizeChange " :call UseNormalFont()<CR>"
		call ResetScreenSize()
	endif
endfunction

function! UseNormalFont()
	let &guifont = s:FontNormal
	if exists( "s:KeyFontSizeChange")
		execute "map " s:KeyFontSizeChange " :call UseBigFont()<CR>"
		call ResetScreenSize()
	endif
endfunction

function! UseBigFont()
	let &guifont = s:FontBig
	if exists( "s:KeyFontSizeChange")
		execute "map " s:KeyFontSizeChange " :call UseSmallFont()<CR>"
		call ResetScreenSize()
	endif
endfunction

"
" Map keys to functions, independent of platform
"
execute "map <kPlus> :call ResizeWindowWide()<CR>"
execute "map <kMinus> :call ResizeWindowNarrow()<CR>"
execute "map <S-kPlus> :call ResizeWindowTall()<CR>"
execute "map <S-kMinus> :call ResizeWindowShort()<CR>"

execute "map <C-F7> O/*<Esc>"
if exists( "s:KeyFontSizeChange")
	execute "map " s:KeyFontSizeChange           " :call UseSmallFont()<CR>"
endif
if exists( "s:KeyMenuToolbarCycle")
	execute "map " s:KeyMenuToolbarCycle         " :call ShowMenuToolbar()<CR>"
endif
